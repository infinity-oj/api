// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf_spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProblemsClient is the client API for Problems service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemsClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	FetchProblem(ctx context.Context, in *FetchProblemRequest, opts ...grpc.CallOption) (*FetchProblemResponse, error)
}

type problemsClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemsClient(cc grpc.ClientConnInterface) ProblemsClient {
	return &problemsClient{cc}
}

func (c *problemsClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, "/Problems/CreateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsClient) FetchProblem(ctx context.Context, in *FetchProblemRequest, opts ...grpc.CallOption) (*FetchProblemResponse, error) {
	out := new(FetchProblemResponse)
	err := c.cc.Invoke(ctx, "/Problems/FetchProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemsServer is the server API for Problems service.
// All implementations must embed UnimplementedProblemsServer
// for forward compatibility
type ProblemsServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	FetchProblem(context.Context, *FetchProblemRequest) (*FetchProblemResponse, error)
	mustEmbedUnimplementedProblemsServer()
}

// UnimplementedProblemsServer must be embedded to have forward compatible implementations.
type UnimplementedProblemsServer struct {
}

func (*UnimplementedProblemsServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (*UnimplementedProblemsServer) FetchProblem(context.Context, *FetchProblemRequest) (*FetchProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProblem not implemented")
}
func (*UnimplementedProblemsServer) mustEmbedUnimplementedProblemsServer() {}

func RegisterProblemsServer(s *grpc.Server, srv ProblemsServer) {
	s.RegisterService(&_Problems_serviceDesc, srv)
}

func _Problems_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Problems/CreateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problems_FetchProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServer).FetchProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Problems/FetchProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServer).FetchProblem(ctx, req.(*FetchProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Problems_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Problems",
	HandlerType: (*ProblemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _Problems_CreateProblem_Handler,
		},
		{
			MethodName: "FetchProblem",
			Handler:    _Problems_FetchProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "problems.proto",
}
